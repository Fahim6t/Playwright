What is PlayWright?
-Playwright is an open source automation library created and maintained by microsoft for performing end to end testing. it allows us to automate browers like (Chromium,Firefox and webkit).


*it perform action like
-Navigation of web pages.
-Clicking button events
-Filling forms
-taking screenshot
-perform complex testing for user

-it support single and multipage application automation.


*Key Features of PlayWright
-it supports multi web pages
-it supports Headless and Headed modes.
-Auto waiting
-Parallel Execution.
-Network mocking
-Visual testing
-CI/CD Ready

-Login/logout automation
-Form validation
-UI Flow validation
-Responsive test
-API Mocking during fronted testing

*Software pre-requisit
->nodejs
    node -v
->npm 
    npm -v 
->typescript
    tsc -v 
    // commad to install typecript
    npm install -g typecript 
*Editor
    ->VS code

<--------------- commands ------------------->

*How to create PlayWright project
npm init playwright@latest

*How to start playwright project
npx playwright test

*How to get the test report
npx playwright show-report


Note: By default all playwright script run in headless mode.

*how to execute automation with headed mode
npx playwright test --headed 

*how to execute automation script in headed mode with single browsers
npx playwright test --headed --project=chromium 

-----------------------------------------------------------------------------------
Locator:
it is to find an element on page at the any moment.

1. Id selector(#): Select an element base on Id.
const elementName = page.locator("id=#idName");

2. Class Selector(.): Select element based on class name
const elementName = page.locator(".className);

3.text selector: Select an element bases on what text it contain.
const elementName = page.locator("'[text='textFormation']");

4.CSS Selector: Select an element bases on their css propety
const elementName = page.locator("css=button#id");

5.Xpath Selector: Select on element bases on their Xpath query(in this we use element attribute and its value)
const elementName= page.locator("xpath=//button[text()='submit']");


*browser context:
  -browsercontext is an instance of browser or you can say seperate with incognito mode. where 
  it store user session and cookies sepwratly, it is use for authentication
  -if there is multiple user then an only then we use.we do not use it for single user.


  ------------------------------------------------------------------------------------
Assertion:
-In PlayWright assertion is use to verify that the application behaves as expected or not during testing. they ensure that UI, Element, data are in correct state before or after performing action.
-playwright provide us built-in asertion throught expect() method, expect method 
provided by 'playwright/test packages'

example:
-toBeVisible() : it will pass test if element is toBeVisible.
-toHaveText() : it will pass test if element has text or data in it.
-toBeEnabled() : it will pass test if element is enable.

await page.pause(); // it will pause execution an open playwright inspector

command to test file on single browser
npx playwright test assertion.spec.ts --project chromium --headed

-soft Assertion : it will execute next test cases even through test case failed.

*Custom Assertion
-we need to write Custom assertion for complex condition and special bussiness logic 
-we can make reusable logic
-we can use it for dynamic data comdition.

-------------------------------------------------------------------------------------
*How to configure text according to your choice

*Hook
-Hooks allows us to run code before or after yout test.
-All Hookk are part of test API provided by playwright
-when we can use Hooks

-beforeAll() : run code once before all the file.
-afterAll() : run code once after all the file.
-beforeEach() : run code everytime before all the file.
-afterEach() : run code everytime after all the file.
 
How to use record features
-it provide test script after performing action on web application or webpahes
-it start record feature we have page.pause() methods in test code.
 
*use of annotation
*use of hooks
 
test () : it is use to create block for perticular test
describe(): it is use to wrap multiple test cases together belongging same scenarios
 
*fixture:
-it is reusable piece of setup and teardown logical code that you can share across testing
-it works like helper function
-playwright provide us built-in fixture as well as we can create custom fixture

*Why Mock?
-Backend is not ready
-Faster test
-simutetes errors(404,500,403-unauthorized, 200)
-control test data


----------------------------------------------------------------------------------------------------

*End to End testing with Modularizartion
-creating end to end test cases
-splitting test into reusable module and component
-Data Driven testing with paramaterize
-CI/CD Integration with Git and Git Hub

-In End to End testing we verify that the complete function of software application is working proper or not from start to end.
-we ensure that integrated component work together seamlessly.
-In this we validate the entire workflow from uses perpective.

example: user will login ===> product will add to cart => checkout

2-splitting test into reusable module and component
LoginPage.ts

3- Data Driven testing with paramaterize:
-pass multiple user credential for login test

4- CI/CD Integration with Git and GitHub
-In this we configure git and github with playwright
-there are two ways to use git and github with playwright
1.while creating playwright project provide yes option for git configuration
2.create yml file in existing project and write configuration setting in it.
    create proper folder structure for yml file
    -github/workflows/playwright.yml 







